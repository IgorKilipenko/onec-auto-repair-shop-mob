#Область ПрограммныйИнтерфейс

Функция ВыполнитьАутентификациюПользователя(Знач логин) Экспорт
    результат = Новый Структура("Успех, АвторизованныйПользователь", Истина);

    данныеАутентификации = НайтиПользователя(логин);
    Если данныеАутентификации.Успех = Ложь Тогда
        Если данныеАутентификации.Сообщение <> Неопределено Тогда
            данныеАутентификации.Сообщение.Сообщить();
            результат.Успех = Ложь;

            Возврат результат;
        КонецЕсли;
    КонецЕсли;

    внешнийПользователь = данныеАутентификации.Пользователь;
    Если данныеАутентификации.Успех И внешнийПользователь = Неопределено Тогда
        результатСозданияПользователя = СоздатьНовогоПользователя(логин);
        Если результатСозданияПользователя.Успех = Ложь Тогда
            сообщение = Новый СообщениеПользователю;
            сообщение.Текст = "Ошибка аутентификацию пользователя.";
            сообщение.Сообщить();
            результат.Успех = Ложь;

            Возврат результат;
        Иначе
            внешнийПользователь = результатСозданияПользователя.Пользователь;
        КонецЕсли;
    КонецЕсли;

    результат.АвторизованныйПользователь = АвторизоватьПользователя(внешнийПользователь);
    Возврат результат;
КонецФункции

Процедура ДеавторизоватьПользователя() Экспорт
    Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0 Тогда
        ПользователиИнформационнойБазы.ТекущийПользователь().Удалить();
    КонецЕсли;
    ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Функция НайтиПользователя(Знач логин) Экспорт
    результат = Новый Структура("Успех, Сообщение, Пользователь, КодСостояния", Истина);

    соединение = создатьHttpСоединение();
    запрос = Новый HTTPЗапрос(СтрШаблон("%1?name=%2", получитьМаршрутПользователей(), логин));
    ответ = соединение.Получить(запрос);

    результат.КодСостояния = ответ.КодСостояния;

    Если ответ.КодСостояния <> 200 Тогда
        результат.Сообщение = Новый СообщениеПользователю;
        результат.Сообщение.Текст = "При попытке аутентификации произошла ошибка!";
        результат.Успех = Ложь;

        Возврат результат;
    КонецЕсли;

    результатЗапроса = ПрочитатьЗначениеJSON(ответ.ПолучитьТелоКакСтроку());
    Если результатЗапроса.Пользователь = Неопределено Тогда
        результат.Сообщение = Новый СообщениеПользователю;
        результат.Сообщение.Текст = "По логину " + логин + " пользователь не найден!";

        Возврат результат;
    КонецЕсли;

    результат.Пользователь = результатЗапроса.Пользователь;
    Возврат результат;
КонецФункции

// Параметры:
//  данныеПользователя - Структура, ФиксированнаяСтруктура - Пользователь основной базы
//      * Имя - Строка
//      * УникальныйИдентификатор - Строка
// Возвращаемое значение:
//  - СправочникСсылка.Пользователи
Функция АвторизоватьПользователя(Знач данныеПользователя) Экспорт
    пользовательИБ = создатьЛокальногоПользователяИБ(данныеПользователя.Имя);
    Если пользовательИБ = Неопределено Тогда
        ВызватьИсключение("Ошибка создания нового пользователя.");
    КонецЕсли;
    текущийПользователь = найтиПользователяПоВнешнемуИдентификатору(данныеПользователя.УникальныйИдентификатор);

    Если текущийПользователь = Неопределено Тогда
        // Создание пользователя в справочнике
        текущийПользователь = создатьЛокальногоПользователя(
                данныеПользователя.Имя,
                пользовательИБ.УникальныйИдентификатор,
                данныеПользователя.УникальныйИдентификатор);
    КонецЕсли;

    ПараметрыСеанса.ТекущийПользователь = текущийПользователь.Ссылка;

    Возврат текущийПользователь.Ссылка;
КонецФункции

Функция СоздатьНовогоПользователя(Знач логин, Знач телефон = Неопределено) Экспорт
    результат = Новый Структура("Успех, Пользователь, Сообщение", Истина);

    соединение = создатьHttpСоединение();
    запрос = Новый HTTPЗапрос(получитьМаршрутПользователей());
    запрос.УстановитьТелоИзСтроки(ЗаписатьЗначениеJSON(Новый ФиксированнаяСтруктура("name, phone", логин, телефон)));
    ответ = соединение.ОтправитьДляОбработки(запрос);

    Если ответ.КодСостояния <> 200 Тогда
        результат.Сообщение = Новый СообщениеПользователю;
        результат.Сообщение.Текст = "Ошибка соединения с сервером.";
        результат.Успех = Ложь;

        Возврат результат;
    КонецЕсли;

    результатЗапроса = ПрочитатьЗначениеJSON(ответ.ПолучитьТелоКакСтроку());
    Если результатЗапроса.Успех = Ложь ИЛИ результатЗапроса.Пользователь = Неопределено Тогда
        результат.Сообщение = Новый СообщениеПользователю;
        результат.Сообщение.Текст = СтрШаблон("Ошибка создания пользователя. Сервер не вернул данные созданного пользователя.
                |Сообщение сервера: %1", ?(результатЗапроса.Сообщение = Неопределено, "", результатЗапроса.Сообщение));
        результат.Успех = Ложь;

        Возврат результат;
    КонецЕсли;

    результат.Пользователь = результатЗапроса.Пользователь;
    Возврат результат;
КонецФункции

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  идентификатор - Строка
// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.Пользователи
//      * Код - Строка - ИдентификаторПользователяИБ
Функция найтиПользователяПоВнешнемуИдентификатору(Знач идентификатор)
    запрос = Новый Запрос;
    запрос.Текст =
        "ВЫБРАТЬ
        |   Пользователи.Ссылка КАК Ссылка,
        |   Пользователи.Код КАК Код
        |ИЗ
        |   Справочник.Пользователи КАК Пользователи
        |ГДЕ
        |   Пользователи.ВнешнийUUID = &Идентификатор
        |";
    запрос.УстановитьПараметр("Идентификатор", идентификатор);
    результатЗапроса = запрос.Выполнить();
    Если результатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;

    результат = Новый Структура("Ссылка, Код");
    ЗаполнитьЗначенияСвойств(результат, результатЗапроса.Выгрузить()[0]);

    Возврат результат;
КонецФункции

Функция получитьАдресСервера()
    адресСервера = Константы.АдресСервераИБ.Получить();
    адресСервера = ?(ПустаяСтрока(адресСервера), "10.0.2.2", адресСервера);
    Возврат адресСервера;
КонецФункции

Функция создатьHttpСоединение()
    адресСервера = получитьАдресСервера();
    соединение = Новый HTTPСоединение(адресСервера, , "MobileClient", , , 1000);
    Возврат соединение;
КонецФункции

Функция получитьМаршрутПользователей()
    Возврат "auto-repair-shop/hs/users/user";
КонецФункции

Функция создатьЛокальногоПользователяИБ(Знач имя)
    пользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
    пользовательИБ.Имя = имя;
    пользовательИБ.Роли.Добавить(Метаданные.Роли.АвторизованныйПользователь);
    пользовательИБ.Записать();

    Возврат пользовательИБ;
КонецФункции

Функция создатьЛокальногоПользователя(Знач имя, Знач идентификатор, Знач внешнийИдентификатор)
    текущийПользователь = Справочники.Пользователи.СоздатьЭлемент();
    текущийПользователь.Код = идентификатор;
    текущийПользователь.ВнешнийUUID = внешнийИдентификатор;
    текущийПользователь.Наименование = имя;
    текущийПользователь.Записать();

    Возврат текущийПользователь;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьАутентификацию(Логин) Экспорт
    адресСнрвера = Константы.АдресСервераИБ.Получить();
    адресСнрвера = ?(ПустаяСтрока(адресСнрвера), "10.0.2.2", адресСнрвера);

    Соединение = Новый HTTPСоединение(адресСнрвера, , "MobileClient");
    запрос = Новый HTTPЗапрос("auto-repair-shop/hs/users/user?name=" + Логин);
    ответ = Соединение.Получить(запрос);

    Если ответ.КодСостояния <> 200 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = "При попытке аутентификации произошла ошибка!";
        сообщение.Сообщить();

        Возврат;
    КонецЕсли;

    результатЗапроса = ПрочитатьЗначениеJSON(ответ.ПолучитьТелоКакСтроку());
    Если результатЗапроса.Пользователь = Неопределено Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = "По логину " + Логин + " пользователь не найден!";
        сообщение.Сообщить();

        Возврат;
    КонецЕсли;

    АвторизоватьПользователя(результатЗапроса.Пользователь);
КонецПроцедуры

// Параметры:
//  данныеПользователя - Структура, ФиксированнаяСтруктура - Пользователь основной базы
//      * Имя - Строка
//      * УникальныйИдентификатор - Строка
// Возвращаемое значение:
//  - СправочникСсылка.Пользователи
Функция АвторизоватьПользователя(Знач данныеПользователя) Экспорт
    пользовательИБ = Неопределено;
    текущийПользователь = найтиПользователяПоВнешнемуИдентификатору(данныеПользователя.УникальныйИдентификатор);

    Если текущийПользователь.Пустая() Тогда
        // Создание пользователя ИБ
        пользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
        пользовательИБ.Имя = данныеПользователя.Имя;
        пользовательИБ.Роли.Добавить(Метаданные.Роли.АвторизованныйПользователь);
        пользовательИБ.Записать();

        // Создание элемента справочника Пользователи
        текущийПользователь = Справочники.Пользователи.СоздатьЭлемент();
        текущийПользователь.Код = пользовательИБ.УникальныйИдентификатор;
        текущийПользователь.ВнешнийUUID = данныеПользователя.УникальныйИдентификатор;
        текущийПользователь.Наименование = данныеПользователя.Имя;
        текущийПользователь.Записать();

    Иначе
        идентификатор = Новый УникальныйИдентификатор(текущийПользователь.Код);
        пользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
                идентификатор);
    КонецЕсли;

    Если пользовательИБ = Неопределено Тогда
        ВызватьИсключение("Ошибка создания нового пользователя.");
    КонецЕсли;

    ПараметрыСеанса.ТекущийПользователь = текущийПользователь.Ссылка;

    Возврат текущийПользователь.Ссылка;
КонецФункции

Процедура ДеавторизоватьПользователя() Экспорт
    Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0 Тогда
        ПользователиИнформационнойБазы.ТекущийПользователь().Удалить();
    КонецЕсли;
    ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  идентификатор - Строка
// Возвращаемое значение:
//  - Структура
//      * Ссылка - СправочникСсылка.Пользователи
//      * Код - Строка - ИдентификаторПользователяИБ
Функция найтиПользователяПоВнешнемуИдентификатору(Знач идентификатор)
    запрос = Новый Запрос;
    запрос.Текст =
        "ВЫБРАТЬ
        |   Пользователи.Ссылка КАК Ссылка,
        |   Пользователи.Код КАК Код,
        |ИЗ
        |   Справочник.Пользователи КАК Пользователи
        |ГДЕ
        |   Пользователи.ВнешнийUUID = &Идентификатор
        |";
    запрос.УстановитьПараметр("Идентификатор", идентификатор);
    результатЗапроса = запрос.Выполнить();
    Если результатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;

    результат = Новый Структура("Ссылка, Код");
    ЗаполнитьЗначенияСвойств(результат, результатЗапроса.Выгрузить()[0]);

    Возврат результат;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
